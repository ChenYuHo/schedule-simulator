from schedule_simulator_core.DAGs import Layer, DAG
from model_extraction.keras_model_profiler import traverse_keras_DFS


def keras_model_to_DAG(model):
    input_layers = list()
    all_layers = dict()

    def add_layer(keras_layer):
        comm_units = len(keras_layer.trainable_weights) * 4  # Each weight is a 32 bit float
        comp_units = len(keras_layer.trainable_weights) + len(keras_layer.non_trainable_weights)
        sim_layer = Layer(comp_units, comp_units, comm_units, name=keras_layer.name, type=type(keras_layer).__name__)
        all_layers[keras_layer.name] = sim_layer

    def connect_layer(keras_layer):
        sim_layer = all_layers[keras_layer.name]
        sim_layer.input_layers = list()
        sim_layer.output_layers = list()
        if len(keras_layer._inbound_nodes) == 0:
            input_layers.append(sim_layer)
        for node in keras_layer._inbound_nodes:
            for keras_parent_layer in node.inbound_layers:
                sim_layer.input_layers.append(all_layers[keras_parent_layer.name])
        for node in keras_layer._outbound_nodes:
            keras_child_layer = node.outbound_layer
            sim_layer.output_layers.append(all_layers[keras_child_layer.name])

    for fun in [add_layer, connect_layer]:
        traverse_keras_DFS(model, processing_function=fun, order="pre-order", top_to_bottom=True)
    return DAG(input_layers)


def apply_timing_profile_to_dag(dag, profiling_report):
    """
    :param dag:
    :param profiling_report: a report generated by profiling the model
    """
    fp = profiling_report["args"]["full_profiling"]

    def apply_timing(sim_layer: Layer):
        layer_timing = profiling_report["timings"][sim_layer.extras["name"]]
        sim_layer.forward_pass_units = layer_timing["forward_pass_cost"]
        sim_layer.backward_pass_units = layer_timing["gradient_calculation_cost"]
        if fp:
            sim_layer.forward_pass_units += layer_timing["loss_calculation_cost"]
            sim_layer.backward_pass_units += layer_timing["gradient_application_cost"]
    dag.traverse_BFS(processing_function=apply_timing)


if __name__ == "__main__":
    """
    Example usage
    """
    import json
    from model_extraction.keras_model_profiler import dummy_multi_model
    from schedule_simulator_core.DAGs import serialize_dag, deserialize_dag

    print(serialize_dag(keras_model_to_DAG(dummy_multi_model())))

